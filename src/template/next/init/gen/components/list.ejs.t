/**
 * @file <%= name %>.tsx
 * @author <%= author %>
 * @generated at <%= createdAt %>
 * This file is generated by Mama CLI
 */

import React from "react";

interface ListProps<TypeData> {
    loading?: boolean;
    skeletonCount?: number;
    data?: TypeData[];
    renderItem: (item: TypeData, index: number) => React.ReactNode;
    renderSkeleton?: (index: number) => React.ReactNode;
    notFound?: React.ReactNode;
}

export const List = <TypeData,>({
    loading = false,
    skeletonCount = 4,
    data = [],
    renderItem,
    renderSkeleton,
    notFound = <div>No data found.</div>,
}: ListProps<TypeData>) => {
    // Validate data to ensure it is an array
    const validData = Array.isArray(data) ? data : [];

    // Render loading skeletons
    if (loading) {
    return (
        <>
            {Array.from({ length: skeletonCount }).map((_, index) => (
                <div key={index}>{renderSkeleton ? renderSkeleton(index) : <div className="skeleton">Loading...</div>}</div>
            ))}
        </>
        );
    }

    // Render "not found" message if data is empty
    if (validData.length === 0) {
        return <>{notFound}</>;
    }

  // Render the data list
    return (
        <>
            {validData.map((item, index) => (
                <React.Fragment key={index}>{renderItem(item, index)}</React.Fragment>
            ))}
        </>
    );
};